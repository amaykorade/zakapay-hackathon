generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    collections   Collection[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Collection {
    id              String      @id @default(cuid())
    title           String
    totalAmount     Int
    currency        String      @default("INR")
    numPayers       Int
    status          CollectionStatus @default(PENDING)
    creator         User?       @relation(fields: [creatorId], references: [id])
    creatorId       String?
    payers          Payer[]
    payments        Payment[]
    createdAt      DateTime   @default(now())
    updatedAt      DateTime   @updatedAt       
}

model Payer {
  id            String     @id @default(cuid())
  name          String
  email         String?
  shareAmount   Int
  payLinkSlug   String     @unique
  status        PayerStatus @default(UNPAID)
  collection    Collection @relation(fields: [collectionId], references: [id])
  collectionId  String
  payments      Payment[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Payment {
  id            String     @id @default(cuid())
  provider      String     // e.g., stripe, razorpay, paypal, upi-gateway
  providerRef   String?    // gateway payment id
  amount        Int        // in paise
  status        PaymentStatus @default(PENDING)
  payer         Payer      @relation(fields: [payerId], references: [id])
  payerId       String
  collection    Collection @relation(fields: [collectionId], references: [id])
  collectionId  String
  // Multi-card payment support
  isMultiCard   Boolean    @default(false)
  parentPaymentId String?  // For grouping multi-card payments
  parentPayment Payment?   @relation("MultiCardPayments", fields: [parentPaymentId], references: [id])
  childPayments Payment[]  @relation("MultiCardPayments")
  paymentAllocations PaymentAllocation[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum CollectionStatus {
  PENDING
  PARTIAL
  COMPLETED
  CANCELLED
}

enum PayerStatus {
  UNPAID
  PAID
  CANCELLED
  REFUNDED
}

model PaymentMethod {
  id            String     @id @default(cuid())
  name          String     // e.g., "American Express", "Visa", "PayPal", "Venmo"
  type          PaymentMethodType
  provider      String     // e.g., "stripe", "paypal", "venmo"
  isActive      Boolean    @default(true)
  paymentAllocations PaymentAllocation[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model PaymentAllocation {
  id            String     @id @default(cuid())
  payment       Payment    @relation(fields: [paymentId], references: [id])
  paymentId     String
  paymentMethod PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  paymentMethodId String
  amount        Int        // Amount allocated to this payment method (in paise)
  status        PaymentStatus @default(PENDING)
  providerRef   String?    // Gateway-specific reference for this allocation
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  DIGITAL_WALLET
  BANK_TRANSFER
  UPI
  OTHER
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  REFUNDED
}